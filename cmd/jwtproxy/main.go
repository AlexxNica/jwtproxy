// Copyright 2015 CoreOS, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"flag"
	"os"
	"os/signal"
	"syscall"
	"time"

	log "github.com/Sirupsen/logrus"

	"github.com/coreos-inc/jwtproxy/config"
	"github.com/coreos-inc/jwtproxy/jwt"
	"github.com/coreos-inc/jwtproxy/proxy"

	_ "github.com/coreos-inc/jwtproxy/jwt/keyserver/keyregistry"
	_ "github.com/coreos-inc/jwtproxy/jwt/keyserver/preshared"
	_ "github.com/coreos-inc/jwtproxy/jwt/noncestorage/local"
	_ "github.com/coreos-inc/jwtproxy/jwt/privatekey/autogenerated"
	_ "github.com/coreos-inc/jwtproxy/jwt/privatekey/preshared"
)

func main() {
	flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ExitOnError)
	flagConfigPath := flag.String("config", "", "Load configuration from the specified yaml file.")
	flagLogLevel := flag.String("log-level", "info", "Define the logging level.")
	flag.Parse()

	// Load configuration.
	config, err := config.Load(*flagConfigPath)
	if err != nil {
		flag.Usage()
		log.Fatalf("Failed to load configuration: %s", err)
	}

	// Initialize logging system.
	level, err := log.ParseLevel(*flagLogLevel)
	if err != nil {
		log.Fatalf("Failed to parse the log level: %s", err)
	}
	log.SetLevel(level)

	// Nothing to run? Abort.
	if !config.VerifierProxy.Enabled && !config.SignerProxy.Enabled {
		log.Warning("No proxy is enabled. Terminating.")
		return
	}

	// Create shutdown channel and make it listen to SIGINT and SIGTERM.
	shutdown := make(chan os.Signal)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	if config.SignerProxy.Enabled {
		// Create signer.
		signer, err := jwt.NewJWTSignerHandler(config.SignerProxy.Signer)
		if err != nil {
			log.Errorf("Failed to create JWT signer: %s", err)
			return
		}
		defer signer.Stop()

		// Create forward proxy.
		forwardProxy, err := proxy.NewProxy(signer.Handler, config.SignerProxy.CAKeyFile, config.SignerProxy.CACrtFile, config.SignerProxy.TrustedCertificates)
		if err != nil {
			log.Errorf("Failed to create forward proxy: %s", err)
			return
		}

		startProxy(
			shutdown,
			config.SignerProxy.ListenAddr,
			"",
			"",
			config.SignerProxy.ShutdownTimeout,
			"forward",
			forwardProxy,
		)
		defer forwardProxy.Stop()
	}

	if config.VerifierProxy.Enabled {
		// Create verifier.
		verifier, err := jwt.NewJWTVerifierHandler(config.VerifierProxy.Verifier)
		if err != nil {
			log.Errorf("Failed to create JWT verifier: %s", err)
			return
		}
		defer verifier.Stop()

		// Create reverse proxy.
		reverseProxy, err := proxy.NewReverseProxy(verifier.Handler)
		if err != nil {
			log.Errorf("Failed to create reverse proxy: %s", err)
			return
		}

		startProxy(
			shutdown,
			config.VerifierProxy.ListenAddr,
			config.VerifierProxy.CrtFile,
			config.VerifierProxy.KeyFile,
			config.VerifierProxy.ShutdownTimeout,
			"reverse",
			reverseProxy,
		)
		defer reverseProxy.Stop()
	}

	// Wait for stop signal.
	<-shutdown
	log.Info("Received stop signal. Stopping gracefully...")

	// The order of `Defer` statements guarantees that:
	// - the forward proxy will shutdown before the signer handler (and its subsystems).
	// - the reverse proxy will shutdown before the verifier handler (and its subsystems).
}

func startProxy(shutdown chan os.Signal, listenAddr, crtFile, keyFile string, shutdownTimeout time.Duration, proxyName string, proxy *proxy.Proxy) {
	go func() {
		log.Infof("Starting %s proxy (Listening on '%s')", proxyName, listenAddr)
		if err := proxy.Serve(listenAddr, crtFile, keyFile, shutdownTimeout); err != nil {
			log.Errorf("Failed to start %s proxy: %s", proxyName, err)
			close(shutdown)
		}
	}()
}
